#!/usr/bin/python
import click
import subprocess
import commands
fport2ports_cl128 = [
 1 , 2 , 3 , 4 , 96 , 95 , 94 , 93 , 5 , 6 , 7 , 8 , 92 , 91 , 90 , 89 ,
 9 , 10 , 11 , 12 , 88 , 87 , 86 , 85 , 13 , 14 , 15 , 16 , 84 , 83 , 82 , 81 ,
 17 , 18 , 19 , 20 , 80 , 79 , 78 , 77 , 21 , 22 , 23 , 24 , 76 , 75 , 74 , 73 ,
 25 , 26 , 27 , 28 , 72 , 71 , 70 , 69 , 29 , 30 , 31 , 32 , 68 , 67 , 66 , 65 ,
 33 , 34 , 35 , 36 , 128 , 127 , 126 , 125 , 37 , 38 , 39 , 40 , 124 , 123 , 122 , 121 ,
 41 , 42 , 43 , 44 , 120 , 119 , 118 , 117 , 45 , 46 , 47 , 48 , 116 , 115 , 114 , 113 ,
 49 , 50 , 51 , 52 , 112 , 111 , 110 , 109 , 53 , 54 , 55 , 56 , 108 , 107 , 106 , 105 ,
 57 , 58 , 59 , 60 , 104 , 103 , 102 , 101 , 61 , 62 , 63 , 64 , 100 , 99 , 98 , 97
 ]
g_platform = ""
g_hwsku = ""
SONIC_CFGGEN_PATH = '/usr/local/bin/sonic-cfggen'
HWSKU_KEY = 'DEVICE_METADATA.localhost.hwsku'
PLATFORM_KEY = 'DEVICE_METADATA.localhost.platform'
def find_platform_and_hwsku ( ) :
 global g_platform
 global g_hwsku
 try :
  ooO0oo0oO0 = subprocess . Popen ( [ SONIC_CFGGEN_PATH , '-H' , '-v' , PLATFORM_KEY ] ,
 stdout = subprocess . PIPE ,
 shell = False ,
 stderr = subprocess . STDOUT )
  oo00 = ooO0oo0oO0 . communicate ( ) [ 0 ]
  ooO0oo0oO0 . wait ( )
  o00 = oo00 . rstrip ( '\n' )
  ooO0oo0oO0 = subprocess . Popen ( [ SONIC_CFGGEN_PATH , '-d' , '-v' , HWSKU_KEY ] ,
 stdout = subprocess . PIPE ,
 shell = False ,
 stderr = subprocess . STDOUT )
  oo00 = ooO0oo0oO0 . communicate ( ) [ 0 ]
  ooO0oo0oO0 . wait ( )
  OOoO = oo00 . rstrip ( '\n' )
 except OSError , OOo :
  raise OSError ( "Cannot detect platform: %s" % str ( OOo ) )
 g_platform = o00
 g_hwsku = OOoO
 return True
def set_port_led ( fport , enable ) :
 return set_port_led_cl ( fport , enable )
def get_port_led ( fport ) :
 return get_port_led_cl ( fport )
def show_all_port_led ( ) :
 if g_hwsku == "AS13-32H" :
  I111IiIi = 32
 elif g_hwsku == "AS13-48F8H" :
  I111IiIi = 56
 elif g_hwsku == "AS23-128H" :
  I111IiIi = 128
 else :
  return
 for oooOOOOO in range ( 1 , I111IiIi + 1 ) :
  i1iiIII111ii = get_port_led ( oooOOOOO )
  click . echo ( "Port Ethernet%d alarm led is %s" % ( oooOOOOO , i1iiIII111ii ) )
def get_port_addr_cl ( port ) :
 oo0Ooo0 = 2
 I1I11I1I1I = 20
 OooO0OO = 50
 if g_hwsku == "AS13-32H" :
  iii11iII = 32
  i1I111I = 48
 elif g_hwsku == "AS13-48F8H" :
  iii11iII = 56
  i1I111I = 72
 elif g_hwsku == "AS23-128H" :
  iii11iII = 128
  oo0Ooo0 = 4
  i1I111I = 144
  if port > ( iii11iII / 2 ) :
   i1I111I = 145
  I1I11I1I1I = 0x30
  OooO0OO = 0x50
 else :
  return ( "" , "" )
 OoOo = iii11iII / oo0Ooo0
 IiIiIi = ( port - 1 ) / OoOo
 II = 30
 IiiiI1II1I1 = II + ( IiIiIi % 2 )
 oo = I1I11I1I1I + ( ( port - 1 ) % OoOo )
 Ii11iI1i = OooO0OO + ( ( port - 1 ) % OoOo )
 if g_hwsku == "AS23-128H" :
  Oo00OOOOO = "%d 0x%d 0x%x" % ( i1I111I , IiiiI1II1I1 , oo )
  O0O = "%d 0x%d 0x%x" % ( i1I111I , IiiiI1II1I1 , Ii11iI1i )
 else :
  Oo00OOOOO = "%d 0x%d 0x%d" % ( i1I111I , IiiiI1II1I1 , oo )
  O0O = "%d 0x%d 0x%d" % ( i1I111I , IiiiI1II1I1 , Ii11iI1i )
 return ( Oo00OOOOO , O0O )
def set_port_led_cl ( fport , enable ) :
 if fport < 1 or fport > 128 :
  return
 if g_hwsku == "AS23-128H" :
  oooOOOOO = fport2ports_cl128 [ fport - 1 ]
 else :
  oooOOOOO = fport
 IiiI11Iiiii , ii1I1i1I = get_port_addr_cl ( oooOOOOO )
 if IiiI11Iiiii == "" or ii1I1i1I == "" :
  return
 if enable == "on" :
  iiiIi1i1I = 1
 elif enable == "off" :
  iiiIi1i1I = 0
 else :
  return
 OOO00 = "i2cset -f -y %s %d" % ( IiiI11Iiiii , iiiIi1i1I )
 iIii11I , OOO0OOO00oo = commands . getstatusoutput ( OOO00 )
 if iIii11I != 0 :
  click . echo ( "Set port %d LED test mode failed\n%s" % ( fport , OOO0OOO00oo ) )
  return
 if enable == "on" :
  OOO00 = "i2cset -f -y %s %d" % ( ii1I1i1I , iiiIi1i1I )
  iIii11I , OOO0OOO00oo = commands . getstatusoutput ( OOO00 )
  if iIii11I != 0 :
   click . echo ( "Set port %d LED color failed\n%s" % ( fport , OOO0OOO00oo ) )
   return
def get_port_led_cl ( fport ) :
 i1iiIII111ii = "unknown"
 if fport < 1 or fport > 128 :
  return i1iiIII111ii
 if g_hwsku == "AS23-128H" :
  oooOOOOO = fport2ports_cl128 [ fport - 1 ]
 else :
  oooOOOOO = fport
 IiiI11Iiiii , ii1I1i1I = get_port_addr_cl ( oooOOOOO )
 if IiiI11Iiiii == "" or ii1I1i1I == "" :
  return i1iiIII111ii
 OOO00 = "i2cget -f -y %s " % IiiI11Iiiii
 iiiIi1i1I = 0
 try :
  iIii11I , OOO0OOO00oo = commands . getstatusoutput ( OOO00 )
  if iIii11I != 0 :
   click . echo ( "Get port %d LED test mode failed" % fport )
   return i1iiIII111ii
  iiiIi1i1I = int ( OOO0OOO00oo . splitlines ( ) [ 0 ] , 16 )
  i1iiIII111ii = "on" if ( iiiIi1i1I == 1 ) else "off"
 except Exception , OOo :
  click . echo ( "Failed to get port %d test mode state %s" % ( fport , str ( OOo ) ) )
  return i1iiIII111ii
 return i1iiIII111ii
def play_all ( enable ) :
 if g_hwsku == "AS13-32H" :
  I111IiIi = 32
 elif g_hwsku == "AS13-48F8H" :
  I111IiIi = 56
 elif g_hwsku == "AS23-128H" :
  I111IiIi = 128
 else :
  return
 for oooOOOOO in range ( 1 , I111IiIi + 1 ) :
  set_port_led ( oooOOOOO , enable )
@ click . group ( )
def port_led ( ) :
 i1I11i1iI = find_platform_and_hwsku ( )
 if not i1I11i1iI :
  click . echo ( "Failed to get platform and hwsku" )
  return
@ click . command ( )
@ click . argument ( 'port' , type = click . IntRange ( 1 , 128 ) , required = True )
def on ( port ) :
 set_port_led ( port , "on" )
@ click . command ( )
@ click . argument ( 'port' , type = click . IntRange ( 1 , 128 ) , required = True )
def off ( port ) :
 set_port_led ( port , "off" )
@ click . command ( )
def onall ( ) :
 play_all ( "on" )
@ click . command ( )
def offall ( ) :
 play_all ( "off" )
@ click . command ( )
@ click . argument ( 'port' , type = click . IntRange ( 1 , 128 ) , required = True )
def status ( port ) :
 i1iiIII111ii = get_port_led ( port )
 click . echo ( "port Ethernet%d led is %s" % ( port , i1iiIII111ii ) )
@ click . command ( )
def show ( ) :
 show_all_port_led ( )
port_led . add_command ( on )
port_led . add_command ( off )
port_led . add_command ( onall )
port_led . add_command ( offall )
port_led . add_command ( status )
port_led . add_command ( show )
if __name__ == '__main__' :
 port_led ( )
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
